输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。
例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）

解析：

 首先先手写这个匹配过程，可以发现当我们将序列A进行入栈的过程中，会将栈顶元素与序列B进行比较，如果相等，则不再入栈，而是出栈与B序列遍历比较，直到不相等时，再继续进行入栈操作
 
import java.util.Stack;
public class Solution {
    public boolean IsPopOrder(int [] pushA,int [] popA) {
      Stack<Integer> stack = new Stack<>();
      int len = pushA.length;
      int index_popA = 0;
      for(int i=0; i<len; i++){
          stack.push(pushA[i]);
          
          while(index_popA < len && stack.peek() == popA[index_popA]){
              stack.pop();
              index_popA++;
          }
      }
        if (stack.isEmpty()) return true;
        else return false;
    }
}
