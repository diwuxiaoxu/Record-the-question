输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。

解析：
  根据遍历的特点，前序遍历：根-左-右；中序遍历：左-根-右；后序遍历：左-右-根
  在确定根的位置之后，再得到左右子树的序列，然后进行递归操作
  
  /**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
         if(pre == null || in == null){
             return null;
         }
        TreeNode root = reBuildBinaryTree(pre,0,pre.length-1,in,0,in.length-1);
        return root;
    }
    public TreeNode reBuildBinaryTree(int[] pre, int preStartIndex, int preEndIndex,
                                     int[] in, int inStartIndex, int inEndIndex){
        if(preStartIndex > preEndIndex || inStartIndex > inEndIndex){
            return null;
        }
        TreeNode node = new TreeNode(pre[preStartIndex]);
        for (int i=inStartIndex; i<= inEndIndex; i++){
            if(pre[preStartIndex] == in[i]){
                int index = i - inStartIndex;
                node.left = reBuildBinaryTree(pre, preStartIndex+1, preStartIndex+index,in,inStartIndex,i-1);
                node.right = reBuildBinaryTree(pre,preStartIndex+index+1, preEndIndex,in,i+1,inEndIndex);
            }
        }
        return node;
    }
}
