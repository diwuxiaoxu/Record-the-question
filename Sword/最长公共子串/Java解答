对于两个字符串，请设计一个时间复杂度为O(m*n)的算法(这里的m和n为两串的长度)，求出两串的最长公共子串的长度。这里的最长公共子串的定义为两个序列U1,U2,..Un和V1,V2,...Vn，其中Ui + 1 == Ui+1,Vi + 1 == Vi+1，同时Ui == Vi。

给定两个字符串A和B，同时给定两串的长度n和m。

测试样例：
"1AB2345CD",9,"12345EF",7
返回：4

解析：动态规划

import java.util.*;

public class LongestSubstring {
    public int findLongest(String A, int n, String B, int m) {
        // write code here
        if(n <= 0 || m <=0){
            return 0;
        }
        int [][] dp = new int[n][m];
        int max =0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(A.charAt(i) == B.charAt(j)){
                    if (i== 0 || j==0){
                        dp[i][j] = 1;
                    }
                    else{
                         dp[i][j] = dp[i-1][j-1] +1;
                    }
                    max = max >dp[i][j] ? max:dp[i][j];
                }
            }
        }
        return max;
    }
}
