输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）

解析：

可以直接理解为判断B是否是A的子树

所以需要判断三个方面其中一个为真即可：A的根节点与B，A的左子树与B，A的右子树与B

结点是否相等的判断有四个方向：

 if root1 == null && root2 ==null return true;
 if root1 != null && root2 == null return true;
 if root1 == null && root2 != null return flase;
 if root1.val != root2.val return false;
 
 递归迭代四个方向，分别是root1.left 与 root2.left， root1.right 与 root2.right；
 
 
 /**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public boolean HasSubtree(TreeNode root1,TreeNode root2) {
        if (root1 == null || root2 == null) return false;
        return isSubtree(root1,root2) || isSubtree(root1.left, root2) || isSubtree(root1.right, root2);
    }
    public boolean isSubtree(TreeNode root1, TreeNode root2){
        if (root1 == null && root2 == null) return true;
        if (root2 == null) return true;
        if (root1 == null) return false;
        if (root1.val != root2.val) return false;
        return isSubtree(root1.left, root2.left) && isSubtree(root1.right,root2.right);
    }
}
