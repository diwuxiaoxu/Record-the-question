解析：

    使用数组的方法，会很容易超时
    
    使用双向队列，实现边移动窗口，边进行比较，将每次的最大值都放在队列的最左边
    
    import java.util.*;
public class Solution {
    public ArrayList<Integer> maxInWindows(int [] num, int size)
    {
        //数组的话，就是先得到每个窗口内的元素，然后比较得到最大值
        //双向队列的话，就是我每次移动时都会进行比较，每次都只保留最大值，将最大值放在队首
        ArrayList<Integer> res = new ArrayList<>();
        if (size < num.length || size <=0) return res;
        //双向队列，存储num下标
        Deque<Integer> deque = new ArrayDeque<>();
        
        for(int i=0; i<num.length; i++){
            if (!deque.isEmpty() && (i - deque.peekFirst())>= size){
                //此时说明当前的滑动窗口大小已经超出了size,需要将滑动窗口右移
                deque.pollFirst();
            }
            //寻找最大值，最大值一直放在deque.peekfirst()中
            while(!deque.isEmpty() && num[i] >= num[deque.peekLast()]){
                deque.pollLast();
            }
            deque.offer(i);
            if (i >= size -1){
                res.add(num[deque.peekFirst()]);
            }
        }
        return res;
    }
}
