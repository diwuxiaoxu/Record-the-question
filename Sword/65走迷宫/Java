题目描述
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。

public class Solution {
    public boolean hasPath(char[] matrix, int rows, int cols, char[] str)
    {
        //典型的迷宫问题 dfs+回溯
        boolean[] hasUsed = new boolean[matrix.length];
        //找到起始位置
        for (int i=0; i<rows; i++){
            for(int j=0 ; j<cols; j++){
                int index = i*cols + j;
                if (matrix[index] == str[0]){
                    if (find(matrix,rows,cols,str,i,j,0,hasUsed)){
                            return true;
                    }
                }
            }
        }
       return false;
    }
    public boolean find(char[] matrix, int rows, int cols,char[] str,int i, int j,int strIndex,boolean[] hasUsed){
        int index = i * cols + j;
        if (i<0 || i>= rows || j<0 || j>= cols || matrix[index] != str[strIndex] || hasUsed[index]) return false;
        
        if (strIndex == str.length -1) return true;
        
        hasUsed[index] = true;
        
        if (find(matrix,rows,cols,str,i+1,j,strIndex+1,hasUsed)
               || find(matrix,rows,cols,str,i-1,j,strIndex+1,hasUsed)
               || find(matrix,rows,cols,str,i,j+1,strIndex+1,hasUsed)
               || find(matrix,rows,cols,str,i,j-1,strIndex+1,hasUsed))
            return true;
        //回溯到上一步
        hasUsed[index] = false;
        return false;
    }

}
