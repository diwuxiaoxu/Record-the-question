题目描述
给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],其中B中的元素B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]。不能使用除法。
（注意：规定B[0] = A[1] * A[2] * ... * A[n-1]，B[n-1] = A[0] * A[1] * ... * A[n-2];）

解析：

针对B数组，可以发现B中每个位置的值，都可以划分为A中前i个和后n-i个乘积，
  首先我们建立left数组，来存放每个位置i的前i-1个数据乘积和
  建立right数组，来存放每个位置i的后n-i个数据乘积和

import java.util.ArrayList;
public class Solution {
    public int[] multiply(int[] A) {
     int len = A.length;
      int [] B = new int[len];
        //可以发现对于B中的每个元素都是A中前部分与后部分相乘的结果
        int[] left = new int[len];
        //left,right 分别存储A中每个位置的前部分和后部分乘积和
        int[] right  = new int[len];
        
        left[0] = 1;
        for(int i=1;i<len;i++){
            left[i] = left[i-1] * A[i-1];
        }
        
        right[len-1] = 1;
        for(int i=len-2; i>=0; i--){
            right[i] = right[i+1] * A[i+1];
        }
        
        for(int i=0; i<len; i++){
            B[i] = left[i] * right[i];
        }
        return B;
    }
}
